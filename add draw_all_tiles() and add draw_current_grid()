int[][] grid = {{1, 2, 1, 2}, {3, 4, 1, 2}, {2, 1, 3, 4}};
int[][] current_grid = {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}};
int w, h;
boolean firstClick = true;
int firstRow, firstCol;

void setup() {
  size(500, 500);
  strokeWeight(12);
  background(255);

  int rows = grid.length;
  int cols = grid[0].length;

  w = width / cols;
  h = height / rows;

  shuffle_2D_Array(grid);
  update(grid, 0);
  
  draw_all_tiles();
}

void update(int[][] a, int d) {
  int i = 0;
  while (i < a.length) {
    int j = 0;
    while (j < a[0].length) {
      a[i][j] = a[i][j] + d;
      j++;
    }
    i++;
  }
}

void draw_lines(int x, int y, int n) {
  int i = 0;
  while (i < n) {
    line(x + i * 20, y, x + i * 20, y + 40);
    i++;
    }
}

void shuffle_2D_Array(int[][] arr) {
  int rows = arr.length;
  int cols = arr[0].length;
  
  int i = 0;
  while (i < rows) {
    int j = 0;
    while (j < cols) {
      
      int randomRow = int(random(rows));
      int randomCol = int(random(cols));
      
      int temp = arr[i][j];
      arr[i][j] = arr[randomRow][randomCol];
      arr[randomRow][randomCol] = temp;

      j++;
    }
    i++;
  }
}

void draw(){
}

void mouseClicked(){
  background(255);
  draw_all_tiles();
  draw_current_grid();
  
  int clickedRow = mouseY / h;
  int clickedCol = mouseX / w;
  
  println(grid[firstRow][firstCol],":",grid[clickedRow][clickedCol]);
  
  if(current_grid[clickedRow][clickedCol] == 0){
    draw_lines(10 + clickedCol * w, 10 + clickedRow * h, grid[clickedRow][clickedCol]);
    current_grid[clickedRow][clickedCol] = 1;
    if(firstClick){
      firstRow = clickedRow;
      firstCol = clickedCol;
      firstClick = false;
    }
    else{
      if(grid[firstRow][firstCol] == grid[clickedRow][clickedCol] && ((firstRow != clickedRow) || (firstCol != clickedCol))){
        println("Match!");
        current_grid[firstRow][firstCol] = 1;
        current_grid[clickedRow][clickedCol] = 1;
      }
      else{
        println("Not match!");
        current_grid[firstRow][firstCol] = 0;
        current_grid[clickedRow][clickedCol] = 0;
      }
      firstClick = true;
    }
  }
}

void draw_all_tiles(){
  int rows = grid.length;
  int cols = grid[0].length;
  
  int i = 0;
  while (i < rows) {
    int j = 0;
    while (j < cols) {
      draw_tiles(10 + j * w, 10 + i * h);
      j++;
    }
    i++;
  }
}

void draw_tiles(int x, int y){
  line(x-20,y-20,x+80,y-20);
  line(x+80,y-20,x+80,y+60);
  line(x+80,y+60,x-20,y+60);
  line(x-20,y+60,x-20,y-20);
}

void draw_current_grid(){
  int rows = grid.length;
  int cols = grid[0].length;
  
  int i = 0;
  while (i < rows)
  {
    int j = 0;
    while (j < cols) {
      if(current_grid[i][j] == 1)
      draw_lines(10 + j * w, 10 + i * h, grid[i][j]);
      j++;
    }
    i++;
  }
}
